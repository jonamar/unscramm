---
description:
globs:
alwaysApply: false
---
# Port Management Guidelines

## Overview

The project includes a comprehensive port management system to prevent conflicts between development services and protect system-critical ports.

## Key Components

- **`.env.ports`**: Central configuration file for all port assignments
- **`check-and-run.sh`**: Shell script that validates port availability before running commands
- **`ports.js`**: JavaScript utility for reading and managing port configurations
- **`check-ports.js`**: Utility to check all configured ports at once
- **Updated npm scripts**: Pre-configured to use the port management system

## Standard Port Assignments

```
NEXT_PORT=6002           # Next.js development server
STORYBOOK_PORT=6006      # Storybook UI component development server
TEST_PREVIEW_PORT=6007   # Storybook test runner preview port
```

## Protected Ports

The following ports should never be used for development services:

- **Ports 0-1023**: System reserved ports
- **Port 11434**: Reserved for Ollama AI Service
- **Port 8080**: Reserved for Open WebUI 
- **Port 3000**: Common dev server port (potential conflicts)

## Usage Patterns

### Starting a Development Server Safely

- **DO** use the check-and-run script to start services:

```bash
./scripts/check-and-run.sh <port> "<command>"
```

- **Example**: 

```bash
./scripts/check-and-run.sh 6006 "storybook dev -p 6006"
```

### Updating NPM Scripts

- **DO** use the check-and-run script in package.json scripts for services that require specific ports:

```json
{
  "scripts": {
    "service": "./scripts/check-and-run.sh 6006 \"actual-command -p 6006\""
  }
}
```

### Adding New Service Ports

1. Add the port definition to `.env.ports`:

```
NEW_SERVICE_PORT=6010    # Description of service
```

2. Reference it in npm scripts:

```json
{
  "scripts": {
    "new-service": "./scripts/check-and-run.sh 6010 \"new-service -p 6010\""
  }
}
```

### Accessing Ports Programmatically

```javascript
import { getPort } from './scripts/ports.js';

// Get port from configuration
const port = getPort('SERVICE_PORT');
console.log(`Starting service on port ${port}`);
```

## Checks and Validation

- Run `npm run ports:init` to create the initial port configuration file
- Run `npm run ports:list` to view all configured ports
- Run `npm run ports:check` to verify if all configured ports are available

## Troubleshooting

If a port conflict is detected, you'll see an error like:

```
⚠️ Port 6006 is already in use by node
ℹ️ Consider using port 6008 instead

Options:
1. Fix the port conflict manually and try again
2. Update the .env.ports file with a different port
```

**DO** follow one of the suggested actions:
- Close the conflicting service
- Update `.env.ports` with a different port
- Temporarily use a different port

For complete documentation, see [PORT_MANAGEMENT.md](PORT_MANAGEMENT.md).
