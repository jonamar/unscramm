# Task ID: 2
# Title: Implement core algorithm utilities
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop the core algorithm modules for spell correction, including LCS, edit plan computation, and FLIP animation helpers that adhere to the project styleguide specifications.
# Details:
Create the following utility modules in the /utils directory: 1) lcs.ts with findLCSPositions function to identify common characters between misspelled and correct words, 2) editPlan.ts with computeEditPlan and identifyTrueMovers functions to determine necessary deletions, insertions, and character movements, 3) flipUtils.ts with FLIP (First, Last, Invert, Play) animation helper functions for smooth reordering animations. Each module should be fully typed with TypeScript and include detailed JSDoc comments explaining the algorithms and parameters. The FLIP animation utilities must adhere to the color palette, timing, and animation easing specifications defined in the styleguide.md, and should properly utilize the CSS variables from the styleguide for consistent visual presentation.

# Test Strategy:
Write comprehensive Jest unit tests for each algorithm function, covering edge cases like anagrams, empty strings, identical strings, and long words. Verify algorithm correctness and performance benchmarks. Include tests to verify that animations respect the timing and easing specifications from the styleguide.

# Subtasks:
## 1. Implement LCS algorithm (Longest Common Subsequence) [done]
### Dependencies: None
### Description: Create the findLCSPositions function to identify common characters between misspelled and correct words using dynamic programming.
### Details:


## 2. Develop Edit Plan computation [done]
### Dependencies: None
### Description: Implement the computeEditPlan function that determines necessary deletions, insertions, and character movements between two words.
### Details:


## 3. Create True Movers identification function [done]
### Dependencies: None
### Description: Implement the identifyTrueMovers function that detects letters that break formation and should be highlighted during animation.
### Details:


## 4. Create FLIP animation base utilities [done]
### Dependencies: None
### Description: Implement the foundational FLIP (First, Last, Invert, Play) animation utilities for smooth transitions that adhere to the styleguide specifications.
### Details:
Implementation steps:
1. Create /utils/flipUtils.ts file
2. Implement basic FLIP utility functions:
   - captureElementState: to record the initial position of elements
   - calculateElementTransform: to compute the transform needed between states
3. Define TypeScript interfaces for element states and transforms
4. Add detailed JSDoc comments explaining the FLIP technique and how each function contributes
5. Write unit tests to verify the functions correctly calculate positions and transforms
6. Ensure the utilities work with DOM elements and their positioning
7. Reference the styleguide.md color palette and CSS variables for consistent styling
8. Create constants for animation timing and easing that match the styleguide specifications

## 5. Implement FLIP animation execution utilities [done]
### Dependencies: None
### Description: Create utilities to execute FLIP animations based on the calculated transforms, following the styleguide's animation specifications.
### Details:
Implementation steps:
1. Add to the existing /utils/flipUtils.ts file
2. Implement specific functions mentioned in the spec:
   - recordPositions(letters: HTMLElement[]) â†’ { elm, left, top, width, height }[]
   - applyInvertedTransforms(positions, exaggerationFactor)
   - clearTransformsAfterReflow(elements, duration, easing)
3. Create appropriate interfaces for the position data
4. Add a high-level performFlipAnimation function that combines all steps
5. Ensure these functions integrate well with the existing more complex implementation
6. Add detailed JSDoc comments explaining the functions' purposes
7. Write unit tests to verify the functions work correctly
8. Verify the functions support the animation requirements for the WordTransform component

