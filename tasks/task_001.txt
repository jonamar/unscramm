# Task ID: 1
# Title: Set up Next.js 14 project with TypeScript and PWA configuration
# Status: done
# Dependencies: None
# Priority: high
# Description: Initialize the project with Next.js 14, React 18, TypeScript (ESM), and configure PWA capabilities including service worker and manifest.
# Details:
Create a new Next.js project using `create-next-app` with TypeScript support. Configure the project for ESM modules. Set up the PWA capabilities by adding the necessary Next.js PWA plugin and configuring the service worker and manifest.json file. Initialize the global styles based on the styleguide.md specifications, focusing on the dark theme and accessibility requirements. Set up the project structure following Next.js conventions with directories for components, utils, services, and tests.

# Test Strategy:
Verify project builds successfully. Confirm PWA configuration with Lighthouse audit. Check that TypeScript is properly configured with strict mode enabled.

# Subtasks:
## 1. Initialize Next.js 14 project with TypeScript and ESM configuration [done]
### Dependencies: None
### Description: Set up a new Next.js 14 project with TypeScript support configured for ESM modules and establish the basic project structure.
### Details:
1. Run `npx create-next-app@latest` with the following options:
   - TypeScript: Yes
   - ESLint: Yes
   - Tailwind CSS: Optional (based on styleguide.md)
   - App Router: Yes
   - Import alias: Yes (@/)
2. Configure TypeScript for ESM by updating tsconfig.json:
   - Set "module": "NodeNext"
   - Set "moduleResolution": "NodeNext"
3. Update package.json to include "type": "module"
4. Create the following directory structure:
   - app/ (Next.js App Router)
   - components/ (Reusable UI components)
   - utils/ (Helper functions)
   - services/ (API and external service integrations)
   - types/ (TypeScript type definitions)
   - tests/ (Test files)
5. Test the setup by running `npm run dev` and verifying the app starts correctly
6. Commit the initial project setup

## 2. Configure PWA capabilities with service worker and manifest [done]
### Dependencies: 1.1
### Description: Add PWA functionality to the Next.js application by setting up service worker and web manifest configuration.
### Details:
1. Install next-pwa package: `npm install next-pwa`
2. Create a public/manifest.json file with the following properties:
   - name
   - short_name
   - icons (in various sizes: 192x192, 512x512)
   - start_url
   - display (standalone)
   - background_color
   - theme_color
3. Configure next-pwa in next.config.js:
   ```js
   const withPWA = require('next-pwa')({  
     dest: 'public',
     register: true,
     skipWaiting: true,
     disable: process.env.NODE_ENV === 'development'
   });
   
   module.exports = withPWA({
     // other Next.js config
   });
   ```
4. Add necessary meta tags in app/layout.tsx:
   - viewport
   - theme-color
   - manifest link
   - apple-touch-icon
5. Create placeholder icons in public/ directory
6. Test PWA configuration using Lighthouse in Chrome DevTools
7. Verify service worker registration in production build

## 3. Implement global styles based on styleguide specifications [done]
### Dependencies: 1.1
### Description: Set up global styling with dark theme support and accessibility requirements according to the styleguide.md specifications.
### Details:
1. Review styleguide.md for design specifications
2. Create a global.css file in the app/ directory
3. Implement CSS variables for theme colors with dark mode support:
   ```css
   :root {
     /* Light theme variables */
     --background: #ffffff;
     --text: #000000;
     /* Add other variables from styleguide */
   }
   
   [data-theme='dark'] {
     /* Dark theme variables */
     --background: #121212;
     --text: #ffffff;
     /* Add other variables from styleguide */
   }
   ```
4. Add base styles for accessibility:
   - Appropriate font sizes and line heights
   - Focus states for interactive elements
   - Color contrast meeting WCAG AA standards
5. Implement a theme toggle component in components/ThemeToggle.tsx
6. Add theme context provider in app/providers.tsx
7. Update app/layout.tsx to include the ThemeProvider and global styles
8. Test theme switching functionality
9. Verify accessibility using axe DevTools or similar tool

